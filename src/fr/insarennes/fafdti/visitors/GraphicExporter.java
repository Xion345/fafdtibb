package fr.insarennes.fafdti.visitors;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import fr.insarennes.fafdti.Question;
import fr.insarennes.fafdti.tree.DecisionTree;
import fr.insarennes.fafdti.tree.DecisionTreeLeaf;
import fr.insarennes.fafdti.tree.DecisionTreeQuestion;
import fr.insarennes.fafdti.tree.DecisionTreeVisitor;
import fr.insarennes.fafdti.tree.DecisionTreePending;

//Classe qui crée le fichier .dot représentant l'arbre binaire dont la racine est donné au constructeur

public class GraphicExporter implements DecisionTreeVisitor {

	private PrintWriter out;
	private String filename;
	private DecisionTree root;
	private int iid;
	boolean pass2;
	
	public GraphicExporter(DecisionTree dt, String filename){
		root = dt;
		this.filename = filename;
		iid = 0;
		pass2 = false;
		//on ouvre le flux de sortie
		try {
			FileWriter fw = new FileWriter(filename+".dot");
			out = new PrintWriter(fw);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void launch(){
		//on ajoute l'entete
		this.writeHead();
		//on lance la 1ère passe
		root.accept(this);
		iid = 0;
		pass2 = true;
		//on lance la 2ème passe
		root.accept(this);
		//on clot le fichier
		this.finish();
	}
	@Override
	public void visitQuestion(DecisionTreeQuestion dtq) {
		String name = "id"+iid;
		iid++;
		if(!pass2){
			//Texte dans le noeud
			StringBuilder content = new StringBuilder();
			Question q = dtq.getQuestion();
			content.append("Feature_"+q.getCol()+"_Value_"+q.getStringValue());
			out.println(name+"[shape=diamond, label=\""+content.toString()+"\"];");
		}
		else{
			out.println(name+"->"+"id"+iid+" [label=yes];");
			out.println(name+"->"+"id"+(iid+1)+" [label=no];");
		}
		dtq.getYesTree().accept(this);
		dtq.getNoTree().accept(this);
	}

	@Override
	public void visitLeaf(DecisionTreeLeaf dtl) {
		String name = "id"+iid;
		iid++;
		if(!pass2){
			//Texte dans la feuille
			StringBuilder content = new StringBuilder();
			Map<String,Double> map = dtl.getLabels().getLabels();
			Set<String> lbls = map.keySet();
			Iterator<String> it = lbls.iterator();
			while(it.hasNext()){
				String lb = it.next();
				content.append(lb+"_"+String.valueOf(map.get(lb))+"_");
			}
			out.println(name+"[shape=box, label=\""+content.toString()+"\"];");
		}
	}
	
	@Override
	public void visitPending(DecisionTreePending dtl) throws InvalidCallException {
		throw new InvalidCallException(this.getClass().getName()+" cannot visit a DecisionTreePending");
	}
	
	private void writeHead(){
		out.println("/* "+filename+".dot"+" generated by FAFDTIBB */");
		out.println();
		out.println("digraph "+filename+"FAFgraph{");
		out.println("ratio = \"auto\";");
		out.println("fontsize = 10;");
	}

	private void finish(){
		out.println("}");
		out.close();
	}
}
