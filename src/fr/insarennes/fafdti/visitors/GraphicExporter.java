package fr.insarennes.fafdti.visitors;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import fr.insarennes.fafdti.AttrType;
import fr.insarennes.fafdti.Question;
import fr.insarennes.fafdti.tree.DecisionTree;
import fr.insarennes.fafdti.tree.DecisionTreeLeaf;
import fr.insarennes.fafdti.tree.DecisionTreeQuestion;
import fr.insarennes.fafdti.tree.DecisionTreeVisitor;
import fr.insarennes.fafdti.tree.DecisionTreePending;

//Classe qui crée le fichier .dot représentant l'arbre binaire dont la racine est donné au constructeur

public class GraphicExporter implements DecisionTreeVisitor {

	private PrintWriter out;
	private String filename;
	private DecisionTree root;
	private int iid;
	private StringBuilder items;
	private StringBuilder arcs;
	
	public GraphicExporter(DecisionTree dt, String filename){
		root = dt;
		this.filename = filename;
		iid = 0;
		items = new StringBuilder();
		arcs = new StringBuilder();
		//on ouvre le flux de sortie
		try {
			FileWriter fw = new FileWriter(filename+".dot");
			out = new PrintWriter(fw);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void launch(){
		//on ajoute l'entete
		this.writeHead();
		//on lance la visite
		root.accept(this);
		//on écrit le résultat
		out.println(items.toString());
		out.println(arcs.toString());
		//on clot le fichier
		this.finish();
	}
	@Override
	public void visitQuestion(DecisionTreeQuestion dtq) {
		String name = "id"+iid;
		iid++;
		//item
		//Texte dans le noeud
		StringBuilder content = new StringBuilder();
		Question q = dtq.getQuestion();
		content.append("Feature "+q.getCol()+" Value "+q.getStringValue());
		//Couleur du noeud
		String color = new String();
		AttrType type = q.getType();
		if(type==AttrType.CONTINUOUS)	color = "red";
		else if(type==AttrType.DISCRETE)	color = "green";
		else if(type==AttrType.TEXT)	color = "blue";
		items.append(name+"[shape=diamond, label=\""+content.toString()+"\", color="+color+"];\n");
		//arcs
		arcs.append(name+"->"+"id"+iid+" [label=yes];\n");
		arcs.append(name+"->"+"id"+(iid+1)+" [label=no];\n");
		dtq.getYesTree().accept(this);
		dtq.getNoTree().accept(this);
	}

	@Override
	public void visitLeaf(DecisionTreeLeaf dtl) {
		String name = "id"+iid;
		iid++;
		//Texte dans la feuille
		StringBuilder content = new StringBuilder();
		Map<String,Double> map = dtl.getLabels().getLabels();
		Set<String> lbls = map.keySet();
		Iterator<String> it = lbls.iterator();
		while(it.hasNext()){
			String lb = it.next();
			content.append(lb+" "+String.valueOf(map.get(lb))+"\\n");
		}
		items.append(name+"[shape=box, label=\""+content.toString()+"\"];\n");
	}
	
	@Override
	public void visitPending(DecisionTreePending dtl) throws InvalidCallException {
		throw new InvalidCallException(this.getClass().getName()+" cannot visit a DecisionTreePending");
	}
	
	private void writeHead(){
		out.println("/* "+filename+".dot"+" generated by FAFDTIBB */");
		out.println();
		out.println("digraph "+filename+"FAFgraph{");
		out.println("ratio = \"auto\";");
		out.println("fontsize = 10;");
		out.println();
	}

	private void finish(){
		out.println("}");
		out.close();
	}
}
